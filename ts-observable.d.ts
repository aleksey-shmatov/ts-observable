// Generated by dts-bundle v0.3.0
// Dependencies for this module:
//   node_modules/ts-events/ts-events.d.ts

declare module 'ts-observable' {
    export { default as observable, INotifyPropertyChanged, PropertyChangeEvent, PropertyChangeInfo } from '__ts-observable/lib/observable';
    export { default as ObservableCollection, INotifyCollectionChanged, CollectionChangeEvent, CollectionChangeInfo, CollectionChangeAction } from '__ts-observable/lib/observableCollection';
}

declare module '__ts-observable/lib/observable' {
    import events = require("ts-events");
    export class PropertyChangeInfo {
        target: INotifyPropertyChanged;
        propertyName: any;
        oldValue: any;
        newValue: any;
        constructor(target: INotifyPropertyChanged, propertyName: any, oldValue: any, newValue: any);
    }
    export class PropertyChangeEvent extends events.SyncEvent<PropertyChangeInfo> {
    }
    export interface INotifyPropertyChanged {
        propertyChanged: PropertyChangeEvent;
    }
    export default function observable(target: any, key: string): void;
}

declare module '__ts-observable/lib/observableCollection' {
    import events = require("ts-events");
    export enum CollectionChangeAction {
        Add = 0,
        Remove = 1,
        Replace = 2,
        Reset = 3,
    }
    export class CollectionChangeInfo {
        action: CollectionChangeAction;
        newItems: Array<any>;
        oldItems: Array<any>;
        newIndex: number;
        oldIndex: number;
        constructor(action: CollectionChangeAction);
    }
    export class CollectionChangeEvent extends events.SyncEvent<CollectionChangeInfo> {
    }
    export interface INotifyCollectionChanged {
        collectionChanged: CollectionChangeEvent;
    }
    export default class ObservableCollection<T> implements INotifyCollectionChanged {
        collectionChanged: CollectionChangeEvent;
        constructor();
        getItemAt(index: number): T;
        addItem(item: T): void;
        addItemAt(item: T, index: number): void;
        getItemIndex(item: T): number;
        removeItem(item: T): void;
        numElements: number;
        removeItemAt(itemIndex: number): void;
    }
}

