// Generated by dts-bundle v0.3.0
// Dependencies for this module:
//   typings/eventemitter3/eventemitter3.d.ts

declare module 'ts-observable' {
    export { observable, INotifyPropertyChanged, ObservableObject, PropertyChangeEvent, PropertyChangeInfo } from '__ts-observable/lib/observable';
    export { ObservableCollection, INotifyCollectionChanged, CollectionChangeEvent, CollectionChangeInfo, CollectionChangeAction } from '__ts-observable/lib/observableCollection';
}

declare module '__ts-observable/lib/observable' {
    import EventEmitter = require('eventemitter3');
    export class PropertyChangeInfo {
        target: INotifyPropertyChanged;
        propertyName: any;
        oldValue: any;
        newValue: any;
        constructor(target: INotifyPropertyChanged, propertyName: any, oldValue: any, newValue: any);
    }
    export class PropertyChangeEvent extends EventEmitter {
        listen(handler: (info: PropertyChangeInfo) => void, context?: any): void;
        unlisten(handler: (info: PropertyChangeInfo) => void): void;
        notify(info: PropertyChangeInfo): boolean;
    }
    export interface INotifyPropertyChanged {
        propertyChanged: PropertyChangeEvent;
    }
    export class ObservableObject implements INotifyPropertyChanged {
        propertyChanged: PropertyChangeEvent;
        constructor();
    }
    export function observable(target: any, key: string): void;
}

declare module '__ts-observable/lib/observableCollection' {
    import EventEmitter = require('eventemitter3');
    export enum CollectionChangeAction {
        Add = 0,
        Remove = 1,
        Replace = 2,
        Reset = 3,
    }
    export class CollectionChangeInfo {
        action: CollectionChangeAction;
        target: ObservableCollection<any>;
        newItems: Array<any>;
        oldItems: Array<any>;
        newIndex: number;
        oldIndex: number;
        constructor(action: CollectionChangeAction);
    }
    export class CollectionChangeEvent extends EventEmitter {
        listen(handler: (info: CollectionChangeInfo) => void, context?: any): void;
        unlisten(handler: (info: CollectionChangeInfo) => void): void;
        notify(info: CollectionChangeInfo): boolean;
    }
    export interface INotifyCollectionChanged {
        collectionChanged: CollectionChangeEvent;
    }
    export class ObservableCollection<T> implements INotifyCollectionChanged {
        collectionChanged: CollectionChangeEvent;
        constructor();
        source: Array<T>;
        getItemAt(index: number): T;
        addItem(item: T): void;
        addItemAt(item: T, index: number): void;
        getItemIndex(item: T): number;
        removeItem(item: T): void;
        numElements: number;
        removeItemAt(itemIndex: number): void;
    }
}

